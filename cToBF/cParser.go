// Code generated by goyacc -o cParser.go cParser.y. DO NOT EDIT.

//line cParser.y:4
package ctobf

import __yyfmt__ "fmt"

//line cParser.y:4
const IDENTIFIER = 57346
const I_CONSTANT = 57347
const F_CONSTANT = 57348
const STRING_LITERAL = 57349
const FUNC_NAME = 57350
const SIZEOF = 57351
const PTR_OP = 57352
const INC_OP = 57353
const DEC_OP = 57354
const LEFT_OP = 57355
const RIGHT_OP = 57356
const LE_OP = 57357
const GE_OP = 57358
const EQ_OP = 57359
const NE_OP = 57360
const AND_OP = 57361
const OR_OP = 57362
const MUL_ASSIGN = 57363
const DIV_ASSIGN = 57364
const MOD_ASSIGN = 57365
const ADD_ASSIGN = 57366
const SUB_ASSIGN = 57367
const LEFT_ASSIGN = 57368
const RIGHT_ASSIGN = 57369
const AND_ASSIGN = 57370
const XOR_ASSIGN = 57371
const OR_ASSIGN = 57372
const TYPEDEF_NAME = 57373
const ENUMERATION_CONSTANT = 57374
const TYPEDEF = 57375
const EXTERN = 57376
const STATIC = 57377
const AUTO = 57378
const REGISTER = 57379
const INLINE = 57380
const CONST = 57381
const RESTRICT = 57382
const VOLATILE = 57383
const BOOL = 57384
const CHAR = 57385
const SHORT = 57386
const INT = 57387
const LONG = 57388
const SIGNED = 57389
const UNSIGNED = 57390
const FLOAT = 57391
const DOUBLE = 57392
const VOID = 57393
const COMPLEX = 57394
const IMAGINARY = 57395
const STRUCT = 57396
const UNION = 57397
const ENUM = 57398
const ELLIPSIS = 57399
const CASE = 57400
const DEFAULT = 57401
const IF = 57402
const ELSE = 57403
const SWITCH = 57404
const WHILE = 57405
const DO = 57406
const FOR = 57407
const GOTO = 57408
const CONTINUE = 57409
const BREAK = 57410
const RETURN = 57411
const ALIGNAS = 57412
const ALIGNOF = 57413
const ATOMIC = 57414
const GENERIC = 57415
const NORETURN = 57416
const STATIC_ASSERT = 57417
const THREAD_LOCAL = 57418

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"I_CONSTANT",
	"F_CONSTANT",
	"STRING_LITERAL",
	"FUNC_NAME",
	"SIZEOF",
	"PTR_OP",
	"INC_OP",
	"DEC_OP",
	"LEFT_OP",
	"RIGHT_OP",
	"LE_OP",
	"GE_OP",
	"EQ_OP",
	"NE_OP",
	"AND_OP",
	"OR_OP",
	"MUL_ASSIGN",
	"DIV_ASSIGN",
	"MOD_ASSIGN",
	"ADD_ASSIGN",
	"SUB_ASSIGN",
	"LEFT_ASSIGN",
	"RIGHT_ASSIGN",
	"AND_ASSIGN",
	"XOR_ASSIGN",
	"OR_ASSIGN",
	"TYPEDEF_NAME",
	"ENUMERATION_CONSTANT",
	"TYPEDEF",
	"EXTERN",
	"STATIC",
	"AUTO",
	"REGISTER",
	"INLINE",
	"CONST",
	"RESTRICT",
	"VOLATILE",
	"BOOL",
	"CHAR",
	"SHORT",
	"INT",
	"LONG",
	"SIGNED",
	"UNSIGNED",
	"FLOAT",
	"DOUBLE",
	"VOID",
	"COMPLEX",
	"IMAGINARY",
	"STRUCT",
	"UNION",
	"ENUM",
	"ELLIPSIS",
	"CASE",
	"DEFAULT",
	"IF",
	"ELSE",
	"SWITCH",
	"WHILE",
	"DO",
	"FOR",
	"GOTO",
	"CONTINUE",
	"BREAK",
	"RETURN",
	"ALIGNAS",
	"ALIGNOF",
	"ATOMIC",
	"GENERIC",
	"NORETURN",
	"STATIC_ASSERT",
	"THREAD_LOCAL",
	"'('",
	"')'",
	"','",
	"':'",
	"'['",
	"']'",
	"'.'",
	"'{'",
	"'}'",
	"'&'",
	"'*'",
	"'+'",
	"'-'",
	"'~'",
	"'!'",
	"'/'",
	"'%'",
	"'<'",
	"'>'",
	"'^'",
	"'|'",
	"'?'",
	"'='",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line cParser.y:533

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 2409

var yyAct = [...]int{

	172, 248, 151, 427, 83, 9, 247, 162, 246, 134,
	49, 154, 84, 238, 123, 227, 250, 335, 94, 183,
	92, 52, 88, 8, 91, 149, 96, 128, 90, 54,
	51, 476, 129, 143, 95, 6, 87, 79, 89, 4,
	75, 5, 5, 270, 251, 133, 252, 422, 56, 57,
	58, 59, 60, 369, 54, 279, 342, 278, 70, 81,
	270, 69, 354, 189, 370, 244, 199, 200, 125, 125,
	125, 142, 140, 76, 139, 333, 127, 341, 177, 130,
	139, 271, 68, 81, 80, 186, 124, 124, 124, 73,
	192, 193, 136, 205, 194, 85, 178, 85, 206, 207,
	131, 381, 55, 144, 125, 239, 208, 203, 204, 474,
	185, 146, 53, 54, 150, 176, 228, 452, 54, 184,
	229, 93, 124, 451, 137, 236, 53, 55, 136, 219,
	125, 125, 132, 270, 125, 240, 383, 53, 125, 230,
	231, 190, 142, 130, 473, 197, 198, 130, 124, 124,
	47, 352, 124, 350, 226, 462, 124, 351, 461, 349,
	241, 235, 459, 67, 131, 97, 458, 97, 131, 275,
	456, 441, 268, 408, 266, 65, 284, 287, 243, 281,
	439, 81, 186, 245, 242, 54, 297, 428, 150, 294,
	229, 55, 436, 85, 239, 430, 53, 421, 300, 225,
	420, 53, 54, 412, 216, 218, 97, 220, 405, 346,
	399, 375, 323, 283, 301, 296, 305, 306, 320, 304,
	311, 312, 303, 125, 329, 208, 299, 125, 125, 208,
	340, 302, 315, 316, 317, 81, 373, 372, 313, 314,
	332, 124, 330, 66, 331, 124, 124, 125, 142, 353,
	122, 126, 343, 347, 358, 64, 130, 348, 55, 226,
	295, 289, 282, 97, 356, 124, 355, 339, 53, 184,
	359, 362, 361, 85, 235, 297, 455, 131, 85, 229,
	363, 364, 365, 360, 371, 85, 209, 374, 367, 186,
	228, 270, 380, 97, 229, 97, 97, 97, 97, 97,
	97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
	97, 97, 330, 378, 468, 270, 368, 344, 76, 307,
	308, 309, 310, 78, 269, 466, 270, 77, 296, 35,
	36, 37, 394, 267, 184, 464, 270, 81, 184, 401,
	403, 453, 454, 97, 81, 186, 382, 240, 97, 389,
	396, 416, 270, 142, 411, 97, 406, 407, 293, 410,
	347, 188, 82, 413, 415, 270, 414, 270, 54, 393,
	384, 385, 437, 184, 318, 270, 400, 53, 85, 418,
	419, 398, 142, 291, 292, 397, 425, 388, 387, 386,
	424, 379, 319, 432, 433, 125, 290, 233, 81, 186,
	232, 438, 224, 440, 187, 326, 186, 417, 276, 327,
	328, 142, 442, 124, 423, 274, 273, 443, 444, 445,
	213, 214, 215, 97, 272, 446, 448, 450, 223, 222,
	431, 63, 457, 62, 61, 460, 366, 186, 463, 195,
	196, 55, 191, 201, 202, 298, 376, 357, 97, 325,
	465, 324, 467, 142, 411, 50, 471, 472, 470, 410,
	125, 277, 136, 2, 71, 46, 475, 3, 148, 477,
	157, 478, 158, 116, 117, 119, 120, 103, 124, 100,
	101, 156, 155, 152, 97, 249, 181, 211, 180, 237,
	42, 210, 33, 212, 32, 31, 11, 10, 7, 34,
	118, 13, 14, 15, 17, 18, 39, 35, 36, 37,
	28, 20, 21, 22, 23, 26, 27, 24, 25, 19,
	29, 30, 44, 45, 43, 138, 159, 160, 163, 48,
	164, 165, 166, 167, 168, 169, 170, 171, 41, 104,
	38, 121, 40, 12, 16, 98, 253, 86, 102, 322,
	99, 426, 74, 265, 106, 107, 108, 109, 110, 111,
	135, 115, 158, 116, 117, 119, 120, 103, 161, 100,
	101, 114, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 113, 105, 1, 0, 0, 0, 0, 34,
	118, 13, 14, 15, 17, 18, 39, 35, 36, 37,
	28, 20, 21, 22, 23, 26, 27, 24, 25, 19,
	29, 30, 44, 45, 43, 0, 159, 160, 163, 0,
	164, 165, 166, 167, 168, 169, 170, 171, 41, 104,
	38, 121, 40, 12, 16, 98, 0, 0, 0, 0,
	0, 0, 74, 147, 106, 107, 108, 109, 110, 111,
	254, 0, 112, 116, 117, 119, 120, 103, 161, 100,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 153, 0, 34,
	118, 13, 14, 15, 17, 18, 39, 35, 36, 37,
	28, 20, 21, 22, 23, 26, 27, 24, 25, 19,
	29, 30, 44, 45, 43, 158, 116, 117, 119, 120,
	103, 0, 100, 101, 0, 0, 0, 0, 41, 104,
	38, 121, 40, 12, 16, 98, 0, 72, 0, 0,
	0, 0, 0, 118, 106, 107, 108, 109, 110, 111,
	0, 0, 0, 0, 0, 0, 0, 0, 161, 145,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 159,
	160, 163, 0, 164, 165, 166, 167, 168, 169, 170,
	171, 0, 104, 0, 121, 0, 0, 0, 98, 0,
	0, 0, 0, 0, 0, 74, 0, 106, 107, 108,
	109, 110, 111, 0, 0, 0, 0, 0, 0, 0,
	34, 161, 13, 14, 15, 17, 18, 39, 35, 36,
	37, 28, 20, 21, 22, 23, 26, 27, 24, 25,
	19, 29, 30, 44, 45, 43, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 41,
	0, 38, 0, 40, 12, 16, 0, 112, 116, 117,
	119, 120, 103, 74, 100, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 70, 0,
	0, 0, 0, 0, 34, 118, 0, 0, 0, 0,
	0, 0, 35, 36, 37, 28, 20, 21, 22, 23,
	26, 27, 24, 25, 19, 29, 30, 44, 45, 43,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 0, 0, 0, 104, 38, 121, 0, 0, 0,
	98, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	107, 108, 109, 110, 111, 34, 0, 13, 14, 15,
	17, 18, 39, 35, 36, 37, 28, 20, 21, 22,
	23, 26, 27, 24, 25, 19, 29, 30, 44, 45,
	43, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 41, 0, 38, 0, 40, 0,
	16, 297, 334, 0, 0, 229, 0, 0, 0, 0,
	34, 53, 13, 14, 15, 17, 18, 39, 35, 36,
	37, 28, 20, 21, 22, 23, 26, 27, 24, 25,
	19, 29, 30, 44, 45, 43, 112, 116, 117, 119,
	120, 103, 0, 100, 101, 0, 0, 0, 0, 41,
	0, 38, 0, 40, 0, 16, 228, 334, 0, 0,
	229, 0, 0, 0, 118, 0, 53, 112, 116, 117,
	119, 120, 103, 0, 100, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 121, 0, 0, 0, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 110, 111, 0, 0, 0, 0, 0, 0,
	0, 0, 161, 0, 104, 0, 121, 0, 0, 0,
	98, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	107, 108, 109, 110, 111, 0, 0, 112, 116, 117,
	119, 120, 103, 280, 100, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 112,
	116, 117, 119, 120, 103, 118, 100, 101, 434, 0,
	0, 0, 35, 36, 37, 0, 0, 0, 0, 0,
	0, 112, 116, 117, 119, 120, 103, 118, 100, 101,
	402, 0, 0, 0, 35, 36, 37, 0, 0, 0,
	0, 0, 0, 0, 104, 82, 121, 0, 0, 118,
	98, 0, 392, 0, 0, 435, 35, 36, 37, 106,
	107, 108, 109, 110, 111, 0, 104, 82, 121, 0,
	0, 0, 98, 0, 0, 0, 0, 404, 0, 0,
	0, 106, 107, 108, 109, 110, 111, 0, 104, 82,
	121, 0, 0, 0, 98, 0, 0, 0, 0, 390,
	0, 0, 0, 106, 391, 108, 109, 110, 111, 112,
	116, 117, 119, 120, 103, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 112, 116, 117, 119, 120, 103, 118, 100, 101,
	338, 0, 0, 0, 35, 36, 37, 0, 0, 0,
	0, 0, 0, 112, 116, 117, 119, 120, 103, 118,
	100, 101, 286, 0, 0, 0, 35, 36, 37, 0,
	0, 0, 0, 0, 0, 0, 104, 82, 121, 0,
	0, 118, 98, 0, 175, 0, 0, 336, 35, 36,
	37, 106, 337, 108, 109, 110, 111, 0, 104, 82,
	121, 0, 0, 0, 98, 0, 0, 0, 0, 288,
	0, 0, 0, 106, 285, 108, 109, 110, 111, 0,
	104, 82, 121, 0, 0, 0, 98, 0, 0, 0,
	0, 173, 0, 0, 0, 106, 174, 108, 109, 110,
	111, 34, 0, 13, 14, 15, 17, 18, 39, 35,
	36, 37, 28, 20, 21, 22, 23, 26, 27, 24,
	25, 19, 29, 30, 44, 45, 43, 112, 116, 117,
	119, 120, 103, 0, 100, 101, 0, 0, 0, 0,
	41, 0, 38, 0, 40, 12, 16, 0, 0, 0,
	0, 0, 0, 0, 74, 118, 112, 116, 117, 119,
	120, 103, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 0, 0, 0, 0, 0,
	0, 35, 36, 37, 104, 0, 121, 0, 0, 0,
	98, 0, 0, 0, 251, 0, 252, 141, 469, 106,
	107, 108, 109, 110, 111, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 82, 121, 0, 0, 0, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 110, 111, 112, 116, 117, 119, 120, 103,
	0, 100, 101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 112, 116, 117, 119,
	120, 103, 118, 100, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 112, 116,
	117, 119, 120, 103, 118, 100, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 121, 0, 0, 118, 98, 0, 0,
	0, 251, 0, 252, 141, 409, 106, 107, 108, 109,
	110, 111, 0, 104, 0, 121, 0, 0, 0, 98,
	0, 0, 0, 251, 0, 252, 141, 0, 106, 107,
	108, 109, 110, 111, 0, 104, 0, 121, 0, 0,
	0, 98, 449, 0, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 110, 111, 112, 116, 117, 119,
	120, 103, 0, 100, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 112, 116,
	117, 119, 120, 103, 118, 100, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	112, 116, 117, 119, 120, 103, 118, 100, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 121, 0, 0, 118, 98,
	447, 0, 0, 0, 0, 0, 0, 0, 106, 107,
	108, 109, 110, 111, 0, 104, 0, 121, 0, 0,
	0, 98, 0, 0, 0, 0, 0, 0, 141, 0,
	106, 107, 108, 109, 110, 111, 0, 104, 0, 121,
	0, 0, 0, 98, 0, 0, 0, 0, 0, 0,
	381, 0, 106, 107, 108, 109, 110, 111, 112, 116,
	117, 119, 120, 103, 0, 100, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	112, 116, 117, 119, 120, 103, 118, 100, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 112, 116, 117, 119, 120, 103, 118, 100,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 121, 0, 0,
	118, 98, 321, 0, 0, 0, 0, 0, 0, 0,
	106, 107, 108, 109, 110, 111, 0, 104, 0, 121,
	0, 0, 0, 98, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 107, 108, 109, 110, 111, 0, 104,
	0, 121, 0, 0, 0, 221, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 107, 108, 109, 110, 111,
	112, 116, 117, 119, 120, 103, 182, 100, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	0, 0, 0, 34, 0, 13, 14, 15, 17, 18,
	39, 35, 36, 37, 28, 20, 21, 22, 23, 26,
	27, 24, 25, 19, 29, 30, 44, 45, 43, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 121,
	0, 0, 41, 217, 38, 0, 40, 0, 16, 0,
	179, 0, 106, 107, 108, 109, 110, 111, 34, 0,
	13, 14, 15, 17, 18, 39, 35, 36, 37, 28,
	20, 21, 22, 23, 26, 27, 24, 25, 19, 29,
	30, 44, 45, 43, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 41, 34, 38,
	0, 40, 0, 16, 0, 395, 35, 36, 37, 28,
	20, 21, 22, 23, 26, 27, 24, 25, 19, 29,
	30, 44, 45, 43, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 38,
	0, 0, 12, 0, 0, 34, 0, 0, 0, 0,
	0, 0, 345, 35, 36, 37, 28, 20, 21, 22,
	23, 26, 27, 24, 25, 19, 29, 30, 44, 45,
	43, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 38, 0, 0, 12,
	0, 0, 0, 0, 0, 0, 0, 0, 34, 234,
	13, 14, 15, 17, 18, 39, 35, 36, 37, 28,
	20, 21, 22, 23, 26, 27, 24, 25, 19, 29,
	30, 44, 45, 43, 377, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 41, 0, 38,
	0, 40, 34, 16, 13, 14, 15, 17, 18, 39,
	35, 36, 37, 28, 20, 21, 22, 23, 26, 27,
	24, 25, 19, 29, 30, 44, 45, 43, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 41, 0, 38, 0, 40, 12, 16, 34, 0,
	13, 14, 15, 17, 18, 39, 35, 36, 37, 28,
	20, 21, 22, 23, 26, 27, 24, 25, 19, 29,
	30, 44, 45, 43, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 34, 41, 0, 38,
	0, 40, 0, 16, 35, 36, 37, 28, 20, 21,
	22, 23, 26, 27, 24, 25, 19, 29, 30, 44,
	45, 43, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 34, 0, 0, 0, 38, 0, 0,
	12, 35, 36, 37, 28, 20, 21, 22, 23, 26,
	27, 24, 25, 19, 29, 30, 44, 45, 43, 0,
	0, 429, 0, 0, 0, 0, 0, 34, 0, 0,
	0, 0, 0, 0, 38, 35, 36, 37, 28, 20,
	21, 22, 23, 26, 27, 24, 25, 19, 29, 30,
	44, 45, 43, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 38,
}
var yyPact = [...]int{

	2181, 2181, -1000, -1000, -1000, 50, -1000, 2227, 2227, 2227,
	2227, 2227, 357, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 356, -1000,
	-1000, 354, 171, 159, -1000, -1000, -1000, -1000, -18, 769,
	-1000, 364, 246, 290, -1000, 181, -1000, -1000, -1000, -1000,
	-1000, 1826, 2336, 843, 2265, 48, 458, 40, -1000, 181,
	1694, 1370, -1000, -1000, 558, 50, 246, 1309, 1942, 290,
	-1000, -1000, -1000, 326, 282, -1000, 43, 423, -7, -5,
	8, 422, 51, 430, 19, 6, -1000, -1000, 843, 410,
	1936, 1936, 1826, 1848, 352, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 351, 324, 39, 2336, 2336, 322, 319, 2084, -1000,
	25, -1000, 2265, 99, -1000, -34, -1000, 458, -1000, -41,
	-1000, 1562, -1000, -1000, 551, -1000, -1000, -1000, 468, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 253, 1826,
	244, -1000, -19, 347, 339, 338, 701, 331, 457, -43,
	-45, 1043, -1000, -1000, 180, 1452, 1287, 179, 318, -1000,
	305, 279, -1000, -1000, 109, -1000, -1000, -1000, 438, 1826,
	1826, 1826, 1826, 1826, 1826, 1826, 1826, 1826, 1826, 1826,
	1826, 1826, 1826, 1826, 1826, 1826, 1826, 1826, 296, 314,
	1826, 1804, 447, 445, -1000, -1000, -1000, 843, -1000, -1000,
	-1000, 843, 2336, 1826, -1000, -1000, 213, 163, 959, 1265,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -23, -1000, 1826,
	237, 2037, -1000, 124, 1826, 74, 72, 1694, -1000, -37,
	-1000, 1826, 443, 1826, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 701, 203, 701,
	1826, -1000, 1826, 1826, 1826, 373, 648, -47, -1000, -1000,
	-1000, -36, -1000, 1452, 155, 154, 1826, 129, -1000, -1000,
	-1000, -1000, 442, 2137, -1000, -1000, 198, 904, 313, 423,
	212, -7, -5, 8, 422, 51, 51, 430, 430, 430,
	430, 19, 19, 6, 6, -1000, -1000, -1000, -1000, 1716,
	54, -1000, 292, -1000, -1000, -1000, 311, 310, 309, 270,
	163, 1177, 1997, 307, -1000, 303, -1000, 128, 1452, 1155,
	126, -1000, 114, -1000, 1826, -1000, -1000, -1000, -1000, -1000,
	88, -1000, 1540, -1000, -1000, -1000, 121, -1000, -1000, -1000,
	701, -1000, -1000, 288, 286, 273, 330, 1012, 1012, -1000,
	-1000, 118, -1000, -1000, 115, -1000, -1000, -1000, -1000, -53,
	1826, 1562, -1000, -1000, -1000, 1826, 17, 17, -1000, 2302,
	-1000, 113, 1452, 1133, 110, -1000, 294, -1000, -1000, -1000,
	1452, 98, 1826, 89, -1000, -1000, -1000, -1000, -1000, -1000,
	1694, -1000, -1000, -1000, 701, 701, 701, 1826, 1672, 1584,
	-1000, -1000, -1000, -1000, 38, -1000, 263, -1000, 196, 90,
	-1000, 1452, 84, 80, 1826, -1000, -1000, -1000, 76, -1000,
	73, -1000, -1000, 377, -1000, -1000, 257, 701, 247, 701,
	236, -1000, 1423, -1000, 2302, 1826, 1826, 62, -1000, -1000,
	27, -1000, -1000, 701, -69, -1000, 701, -1000, 701, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 584, 583, 582, 571, 7, 561, 560, 0, 551,
	3, 187, 550, 549, 8, 103, 548, 26, 34, 18,
	121, 20, 24, 28, 38, 22, 36, 547, 33, 546,
	12, 39, 40, 529, 35, 498, 23, 5, 497, 496,
	455, 4, 1, 495, 494, 492, 490, 27, 32, 14,
	489, 13, 45, 9, 30, 21, 37, 17, 488, 486,
	19, 75, 15, 6, 485, 16, 2, 483, 677, 11,
	482, 481, 470, 468, 25, 463, 467, 464,
}
var yyR1 = [...]int{

	0, 2, 2, 2, 2, 2, 3, 3, 3, 7,
	4, 4, 6, 9, 9, 10, 10, 12, 12, 12,
	12, 12, 12, 12, 12, 12, 12, 13, 13, 15,
	15, 15, 15, 15, 15, 15, 16, 16, 16, 16,
	16, 16, 17, 17, 18, 18, 18, 18, 19, 19,
	19, 20, 20, 20, 21, 21, 21, 21, 21, 22,
	22, 22, 23, 23, 24, 24, 25, 25, 26, 26,
	27, 27, 28, 28, 8, 8, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 5, 5, 30,
	31, 31, 31, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 33, 33, 40, 40, 35, 35, 35,
	35, 35, 35, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 44,
	44, 44, 46, 46, 47, 47, 48, 48, 48, 49,
	49, 49, 49, 50, 50, 51, 51, 51, 45, 45,
	45, 45, 45, 52, 52, 53, 53, 43, 37, 37,
	37, 37, 38, 38, 39, 39, 41, 41, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 54, 54, 54, 54, 56, 56, 57, 57,
	59, 59, 60, 60, 60, 58, 58, 11, 11, 61,
	61, 61, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 42, 42, 42, 14, 14, 14, 14,
	63, 64, 64, 65, 65, 34, 66, 66, 66, 66,
	66, 66, 67, 67, 67, 68, 68, 73, 73, 74,
	74, 69, 69, 70, 70, 70, 71, 71, 71, 71,
	71, 71, 72, 72, 72, 72, 72, 1, 1, 75,
	75, 76, 76, 77, 77,
}
var yyR2 = [...]int{

	0, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 6, 1, 3, 3, 3, 1, 4, 3,
	4, 3, 3, 2, 2, 6, 7, 1, 3, 1,
	2, 2, 2, 2, 4, 4, 1, 1, 1, 1,
	1, 1, 1, 4, 1, 3, 3, 3, 1, 3,
	3, 1, 3, 3, 1, 3, 3, 3, 3, 1,
	3, 3, 1, 3, 1, 3, 1, 3, 1, 3,
	1, 3, 1, 5, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	2, 3, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	5, 2, 1, 1, 1, 2, 2, 3, 1, 2,
	1, 2, 1, 1, 3, 2, 3, 1, 4, 5,
	5, 6, 2, 1, 3, 3, 1, 4, 1, 1,
	1, 1, 1, 1, 4, 4, 2, 1, 1, 3,
	3, 4, 6, 5, 5, 6, 5, 4, 4, 4,
	3, 4, 3, 2, 2, 1, 1, 2, 3, 1,
	1, 3, 2, 2, 1, 1, 3, 2, 1, 2,
	1, 1, 3, 2, 3, 5, 4, 5, 4, 3,
	3, 3, 4, 6, 5, 5, 6, 4, 4, 2,
	3, 3, 4, 3, 4, 1, 2, 1, 4, 3,
	2, 1, 2, 3, 2, 7, 1, 1, 1, 1,
	1, 1, 3, 4, 3, 2, 3, 1, 2, 1,
	1, 1, 2, 7, 5, 5, 5, 7, 6, 7,
	6, 7, 3, 2, 2, 2, 3, 1, 2, 1,
	1, 4, 3, 1, 2,
}
var yyChk = [...]int{

	-1000, -1, -75, -76, -31, -32, -34, -35, -36, -37,
	-38, -39, 75, 33, 34, 35, 76, 36, 37, 51,
	43, 44, 45, 46, 49, 50, 47, 48, 42, 52,
	53, -43, -44, -45, 31, 39, 40, 41, 72, 38,
	74, 70, -46, 56, 54, 55, -75, 100, -33, -41,
	-40, -54, -55, 87, 4, 77, -32, -32, -32, -32,
	-32, 77, 77, 77, 84, 4, 84, 4, 100, 79,
	99, -77, -68, -31, 84, -32, -55, 81, 77, -56,
	-54, -37, 72, -41, -30, -28, -27, -26, -25, -24,
	-23, -22, -21, -20, -19, -18, -17, -15, 77, -12,
	11, 12, -16, 9, 71, -2, 86, 87, 88, 89,
	90, 91, 4, -3, -4, -6, 5, 6, 32, 7,
	8, 73, -11, -49, -36, -37, -11, -30, -47, -48,
	-49, -34, 84, -52, -53, -7, 4, 84, -40, -41,
	-42, 84, -8, -28, -15, -68, -31, 85, -73, -74,
	-31, -66, -67, -68, -69, -70, -71, -72, 4, 58,
	59, 100, -5, 60, 62, 63, 64, 65, 66, 67,
	68, 69, -8, 82, 87, 35, -56, -8, -57, 78,
	-58, -59, 4, -60, -32, -54, -37, 78, 79, 20,
	98, 19, 97, 96, 86, 17, 18, 94, 95, 15,
	16, 13, 14, 88, 89, 87, 92, 93, -5, -11,
	81, 77, 83, 10, 11, 12, -15, 77, -15, -17,
	-15, 77, 77, 77, 78, -61, -54, -62, 77, 81,
	-49, -49, 78, 78, 85, -48, 100, -50, -51, 80,
	-41, -47, 85, 79, 99, -52, -14, -63, -42, -64,
	-65, 81, 83, -29, 99, 21, 22, 23, 24, 25,
	26, 27, 28, 29, 30, 85, -74, 80, -30, 80,
	79, 100, 77, 77, 77, -66, 77, 4, 100, 100,
	100, -5, 82, -56, -8, 87, 35, -8, 82, 82,
	78, 78, 79, 79, -41, -61, -54, 77, 7, -26,
	-5, -25, -24, -23, -22, -21, -21, -20, -20, -20,
	-20, -19, -19, -18, -18, -17, -17, -17, 78, 78,
	-5, 78, -13, -8, 4, 4, -11, -11, -11, -8,
	-62, 81, 77, -61, 78, -57, 82, 87, 35, -56,
	-8, 100, 79, -30, 80, 85, 85, -53, -30, 85,
	79, 85, 79, -42, 99, -65, -30, 4, -8, -66,
	80, -66, -8, -5, -5, -5, 63, -69, -31, 100,
	100, -8, 82, 82, -8, 82, 4, 57, -60, 78,
	80, 84, -17, 82, 78, 79, 78, 78, 78, 79,
	82, 87, 35, -56, -8, 78, -57, 78, 78, 82,
	-56, -8, 35, -8, 82, 82, -51, -30, 85, 85,
	-63, -42, 82, -66, 78, 78, 78, 77, -69, -69,
	82, 82, 100, -28, -14, -8, -9, -10, -11, 59,
	82, -56, -8, -8, 35, 82, 82, 78, -8, 82,
	-8, 82, -42, -66, -66, -66, -5, 78, -5, 78,
	-5, 85, 79, 78, 79, 80, 80, -8, 82, 82,
	-8, 82, 82, 61, 78, -66, 78, -66, 78, 85,
	-10, -8, -8, 82, 82, -66, 100, -66, -66,
}
var yyDef = [...]int{

	0, -2, 267, 269, 270, 0, 92, 94, 96, 98,
	100, 102, 0, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 158, 159, 160, 161, 162,
	163, 0, 0, 0, 132, 133, 268, 90, 0, 106,
	103, 0, 167, 185, 168, 0, 93, 95, 97, 99,
	101, 0, 0, 0, 0, 131, 0, 152, 91, 0,
	0, 0, 272, 273, 0, 0, 166, 0, 0, 183,
	184, 186, 161, 0, 0, 89, 72, 70, 68, 66,
	64, 62, 59, 54, 51, 48, 44, 42, 0, 29,
	0, 0, 0, 0, 0, 17, 36, 37, 38, 39,
	40, 41, 1, 2, 3, 5, 6, 7, 8, 10,
	11, 0, 0, 198, 140, 142, 0, 0, 0, 134,
	0, 138, 0, 0, 153, 156, 9, 0, 104, 106,
	105, 0, 225, 74, 42, 271, 274, 245, 0, 247,
	249, 250, 236, 237, 238, 239, 240, 241, 1, 0,
	0, 251, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 170, 37, 0, 0, 0, 0, 180,
	0, 189, 195, 190, 194, 182, 187, 169, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 23, 24, 30, 0, 31, 32,
	33, 0, 0, 0, 157, 197, 200, 201, 0, 0,
	139, 141, 164, 165, 129, 135, 136, 0, 143, 0,
	147, 0, 148, 0, 0, 0, 0, 0, 227, 0,
	231, 0, 0, 0, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 246, 248, 0, 0, 0,
	0, 252, 0, 0, 0, 0, 0, 0, 263, 264,
	265, 0, 171, 0, 0, 37, 0, 0, 177, 178,
	179, 181, 0, 0, 192, 193, 200, 0, 0, 71,
	0, 69, 67, 65, 63, 60, 61, 55, 56, 57,
	58, 52, 53, 49, 50, 45, 46, 47, 4, 0,
	0, 19, 0, 27, 21, 22, 0, 0, 0, 0,
	199, 0, 0, 0, 219, 0, 203, 37, 0, 0,
	0, 137, 0, 145, 0, 130, 149, 154, 155, 150,
	0, 223, 0, 226, 230, 232, 0, 234, 75, 242,
	0, 244, 88, 0, 0, 0, 0, 0, 0, 262,
	266, 0, 173, 174, 0, 176, 196, 188, 191, 0,
	0, 0, 43, 18, 20, 0, 0, 34, 35, 0,
	211, 37, 0, 0, 0, 221, 0, 202, 220, 204,
	0, 0, 0, 0, 209, 210, 144, 146, 151, 224,
	0, 229, 233, 243, 0, 0, 0, 0, 0, 0,
	172, 175, 235, 73, 0, 28, 0, 13, 0, 0,
	212, 0, 0, 0, 0, 217, 218, 222, 0, 206,
	0, 208, 228, 254, 255, 256, 0, 0, 0, 0,
	0, 25, 0, 12, 0, 0, 0, 0, 214, 215,
	0, 205, 207, 0, 0, 258, 0, 260, 0, 26,
	14, 15, 16, 213, 216, 253, 257, 259, 261,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 91, 3, 3, 3, 93, 86, 3,
	77, 78, 87, 88, 79, 89, 83, 92, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 80, 100,
	94, 99, 95, 98, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 81, 3, 82, 96, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 84, 97, 85, 90,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	}
	goto yystack /* stack new state and value */
}
